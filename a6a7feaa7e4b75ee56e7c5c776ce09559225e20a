{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6aa77d86_b471ee44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002600
      },
      "writtenOn": "2024-12-05T12:20:23Z",
      "side": 1,
      "message": "The retraining pipeline for the retraining api",
      "revId": "a6a7feaa7e4b75ee56e7c5c776ce09559225e20a",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49ef55dc_b2f1250c",
        "filename": "kf-pipelines/qoe-pipeline-retrain-pipeline.ipynb",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1000475
      },
      "writtenOn": "2024-12-05T14:15:00Z",
      "side": 1,
      "message": "we should updated the artifact version form x.0.y to x.0.y+1\n\nso the entire model looks like : model_name/{versino}/artifact_version/model.zip\nmodel_name and version will not change while retrain, only we need to update the artifact version.\n\nAlso we need to update the MME with new artifact version. May be this functionality you could add in MSSDK. so whenever we store the model we also update the model in MME.",
      "range": {
        "startLine": 124,
        "startChar": 9,
        "endLine": 124,
        "endChar": 46
      },
      "revId": "a6a7feaa7e4b75ee56e7c5c776ce09559225e20a",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum vote is required for the \u0027Code-Review\u0027 label. \t\t\tA minumum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a6a7feaa7e4b75ee56e7c5c776ce09559225e20a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ORAN Required GHA\u0027 and one other CI or committer that is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003doran.required.gha AND label:Verified\u003dMAX,count\u003e\u003d2 AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=oran.required.gha AND label:Verified=MAX,count>=2 AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=oran.required.gha"],"failingAtoms":["label:Verified=MIN","label:Verified=MAX,count>=2"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a6a7feaa7e4b75ee56e7c5c776ce09559225e20a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}